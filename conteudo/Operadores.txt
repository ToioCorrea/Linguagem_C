OPERADORES:

Operadores são elementos funcionais que atuam sobre operandos e produzem
um determinado resultado.

Unários → atuam sobre um único operando. Ex.: operador de incremento ++a;
Binários → atuam sobre dois operandos. Ex.: operador de soma a + b.

Tipos de operadores
- Atribuição
- Aritméticos
- Aritmético de atribuição
- Incremento / decremento
- Relacionais
- Lógicos

a + b
(a,b) = operandos
(+)   =operador


//////////////////////////////////////////////////////////////////////////////////////////////////////

OPERADOR DE ATRIBUIÇÃO:
- O sinal de igual “=” é o operador de atribuição do C.
- Ele atribui o valor da direita à variável da esquerda.
- Este operador retorna o valor atribuído.

Sintaxe: <variável> = valor;

Exemplos:
a = 2;  // a variável “a” recebe o valor 2
x = y = z = 10; // as variáveis “z”, “y” e “x” recebem o valor 10

ENTRADA:
#include <stdio.h>
int main()
{
int a = 2;
int x, y, z;
x = y = z = 10;
printf ("a = %d \n", a);
printf ("x = %d y = %d z = %d \n", x, y, z);
return 0;
10. }
SAIDA:
a = 2
x =10 y = 10 z = 10


//////////////////////////////////////////////////////////////////////////////////////////////////////

OPERADORES ARITMÉTICOS:

operadores aritméticos são responsáveis pela execução de operações aritméticas entre constantes e variáveis;

+ = Soma de dois números
- = Diferença entre dois números
* = Produto de dois números
/ = Quociente de dois números
% = Resto da divisão de dois números

Exemplo)

#include <stdio.h>
int main()
{
int a = 7, b = 2;
printf ("Soma: %d\n", a + 5);
printf ("Subtração: %d\n", 5 - b);
printf ("Multiplicação: %d\n", 5 * 10);
printf ("Divisão: %d\n", a / b);
printf ("Resto da divisão: %d\n", a % b);
return 0;
} 
SAIDA:
Soma: 12
Subtração: 3
Multiplicação: 50
Divisão: 3.5
Resto da divisão: 1

//////////////////////////////////////////////////////////////////////////////////////////////////////

OPERADORES ARITMÉTICOS DE ATRIBUIÇÃO

+= : a += 2; → a = a + 2;
*= : a -= 2; → a = a - 2;
/= : a *= 2; → a = a * 2;
%= : a %= 2; → a = a % 2;

Podem ser usados com variável à esquerda e constante, variável ou expressão à direita!

Instrução:
<operando1> < operador aritmético > = <operando2>

Corresponde a:

<operando1> = <operando1> < operador aritmético> < operando2>

Exemplos:

1)
ENTRADA:
#include <stdio.h>
int main()
{
int a = 1, b = 2;
printf ("%d \n", a += 3);   // a = a +3
printf ("%d \n", a += b);   // a = a + b
printf ("%d \n", a += b + 3); // a = a + b + 3
return 0;
}
SAIDA:
4
6
11

2)
ENTRADA:
#include <stdio.h>
int main()
{
float saldo = 100, aporte;
printf ("Digite o valor a ser aportado: ");
scanf ("%f", &aporte);
printf ("Saldo = %6.2f", saldo += aporte);
return 0;
}
SAIDA:
Digite o valor a ser aportado:
Saldo = 200.00

//////////////////////////////////////////////////////////////////////////////////////////////////////

OPERADORES DE INCREMENTO / DECREMENTO:

++ : Incremento 
-- : Decremento

Só podem ser usados com variável!
A diferença entre a pré e a pós-fixação aparece somente em expressões!

Pré-fixado: o símbolo vem antes do operando (ex.: ++a).
- Neste caso a variável 'a' é incrementada antes do seu valor ser usado.

Pós-fixado: o símbolo vem depois do operando (ex.: a++).
- Neste caso a variável 'a' é incrementada depois do seu valor ter sido usado.

Exemplos:

1)
ENTRADA:
#include <stdio.h>
int main()
{
char c = 'a';
int x = 2;
float y = 6.8;
++c;
++x;
++y;
printf (" c = %c \n x = %d \n y = %4.2f \n", c, x, y);
return 0;
}
SAIDA:
c = b 
x = 3 
y = 7.8

2)
ENTRADA:
#include <stdio.h>
int main()
{
int a = 4, b = 4;
++a;
b--;
printf ("a = %d, b = %d \n", a, b);
return 0;
}
SAIDA:
a = 5, b =3

3)
ENTRADA:
#include <stdio.h>
int main()
{
int a = 4, b = 4;
++a;
b--;
printf ("a = %d, b = %d \n", a, b);

a = 4, b = 4;
a++;
--b;
printf ("a = %d, b = %d \n", a, b);
return 0;
}
SAIDA:
a = 5, b = 3
a = 5, b = 3

//////////////////////////////////////////////////////////////////////////////////////////////////////

INCREMENTO / DECREMENTO - PRÉ E PÓS FIXADO:

b = ++a; → a = a +1
           b = a;

b = a++; → b =a;
           a= a + 1;

Os resultados com o operador de decremento (--) são análogos!

Exemplo:

1)
ENTRADA:
#include <stdio.h>
int main()
{
int a, b;
a = 4;
b = ++a; // pré-fixado
printf ("a = %d\n", a);
printf ("b = %d\n\n", b);
a = 4;
b = a++; // pós-fixado
printf ("a = %d\n", a);
printf ("b = %d\n", b);
return 0;
}
saida:
a = 5
b = 5

a = 5
b = 4


2)
ENTRADA:
#include <stdio.h>
int main(){
int a, b;
b = 3;
a = b++;
printf(”Pos-incremento: \'a\' tem valor: %d\n", a);
printf("Variavel \'b\' tem valor: %d\n", b);
a = ++b;
printf("Pre-incremento: \'a\' tem valor: %d\n", a);
printf("Variavel \'b\' tem valor: %d\n", b);
return 0;
}
SAIDA:
Pos-incremento: 'a' tem valor: 3
Variavel 'b' tem valor: 4
Pre-incremento: 'a' tem valor: 5
Variavel 'b' tem valor: 5
//////////////////////////////////////////////////////////////////////////////////////////////////////

OPERADORES RELACIONAIS:

== : Igua a 
!= : Diferente de 
>  : Maior que 
>= : Maior ou igual a 
<  : Menor que 
<= : Menor ou igual a 

Retornam um valor inteiro com significado lógico

1 = verdadeiro
      - Ex.: ('A' != 'a') → 1
0 = falso
      - Ex.: ('A'!= 'A') → 0

Exemplos:

1)
ENTRADA:
#include <stdio.h>
int main()
{
int a = 1;
char b = '2';
printf ("%d \n", 'A' == 'a');
printf ("%d \n", 'A' == 'A');
printf ("%d \n", b == 2);
printf ("%d \n", b == '2');
printf ("%d \n", b == a + 1);
return 0;
}
SAIDA:
0
1
0
1
0

2)
ENTRADA:
#include <stdio.h>
int main()
{
int a = 2;
printf ("Resultado = %d, %d, %d", a=2, a==2, a!=2);
return 0;
}
SAIDA:
Resultado = 2, 1, 0

Observação: O comando de atribuição (a = 2) tem como retorno o valor atribuído!

//////////////////////////////////////////////////////////////////////////////////////////////////////

OPERADORES LÓGICOS:

&& (binário)  = e 
|| (binário)  = ou 
! (unário)    = não 

Exemplo:

ENTRADA:
#include <stdio.h>
int main()
{
printf ("%d \n", ('A' == 'a') && ('A' == 'A')); // F e V
printf ("%d \n", ('A' == 'a') || ('A' == 'A'));
printf ("%d \n", ! ('A' == 'a'));
return 0;
}
SAIDA:
0
1
1

//////////////////////////////////////////////////////////////////////////////////////////////////////

PRECEDÊNCIA DE OPERADORES EM EXPRESSÕES:

Do Maior para o Menor:

lógico (não), menos aritmético, incremento, decremento : ! - ++ --
Aritméticos                                            : * / % + - 
Relacionais                                            : > >= < <= == !=
Lógicos                                                : && || 
Aritméticos de Atribuição                              : = += -= *= /= %= 

- Operadores de maior prioridade devem ser avaliados primeiro.
- Em caso de empate, a avaliação se faz da esquerda para a direita.
- O uso de parênteses em sub-expressões força a avaliação das mesmas com maior prioridade.

EXEMPLO:

ENTRADA:
#include <stdio.h>
int main()
{
printf ("%d\n", 'A' == 'A' || 'A' == 'a' && 'A' == 'a' );
printf ("%d\n", ( 'A' == 'A' || 'A' == 'a' ) && 'A' == 'a' );
return 0;
}
SAIDA:
1
0
